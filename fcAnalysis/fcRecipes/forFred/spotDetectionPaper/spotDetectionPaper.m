%% generate figure 2 - sketch of pipeline
% parameters for 2 spots setup
Kmatrix = [1 0.2; 0 1];
binning = 3;
params.sizeData         = [51 21 11];
params.centerCoor       = round(params.sizeData/2);

params.psfFunc          = @genPSF;
params.psfFuncArgs      = {{'lambda',514e-9,'f',binning,'mode',0},{'lambda',610e-9,'f',binning,'mode',0}};
params.threshPSFArgs    = {[11,11,11]};
params.NoiseFunc        = @genSCMOSNoiseVar;
params.NoiseFuncArgs    = {params.sizeData,'scanType','slow'};

params.As               = 30;
params.Bs               = 0;
params.dist2Spots       = 29;

cameraVar          = params.NoiseFunc(params.NoiseFuncArgs{:});

centerCoor = params.centerCoor ;
psfs        = cellfunNonUniformOutput(@(x) params.psfFunc(x{:}),params.psfFuncArgs);
psfs        = cellfunNonUniformOutput(@(x) centerGenPSF(x),psfs);
psfObjs     = cellfunNonUniformOutput(@(x) myPattern_Numeric(x,'downSample',[binning,binning,binning]),psfs);
psfs        = cellfunNonUniformOutput(@(x) x.returnShape,psfObjs);
psfs        = cellfunNonUniformOutput(@(x) threshPSF(x,params.threshPSFArgs{:}),psfs);

domains     = genMeshFromData(zeros(params.sizeData));
secondCoor = centerCoor+[params.dist2Spots 0 0];
spotCoors2spots = {{[params.As centerCoor],params.Bs},{[params.As secondCoor],params.Bs}};

% 1 spot setup
bkgndVal = 7;
centerCoor = [8 11 6];
bkgnd = zeros(params.sizeData);
bkgnd(1:round(params.sizeData(1)/2),:,:) = bkgndVal;
smoothBKGNDKern = ndGauss([60,60,60],[70,70,70]);
smoothBKGNDKern = smoothBKGNDKern / sum(smoothBKGNDKern(:));
bkgnd = padarray(bkgnd,[100,100,100],'replicate');
bkgnd = convFFTND(bkgnd,smoothBKGNDKern);
bkgnd = unpadarray(bkgnd,params.sizeData);

secondCoor = centerCoor+[params.dist2Spots 0 0];
spotCoors = {{[20 centerCoor],[20 secondCoor],params.Bs}};
bigTheta    = genBigTheta(1,psfObjs,spotCoors);
bigLambdas  = bigLambda(domains,bigTheta,'objKerns',psfObjs);

theBigLambda = bigLambdas{1} + bkgnd;
[sampledData,~,cameraParams] = genMicroscopeNoise(theBigLambda,'readNoiseData',cameraVar);
[~,photonData] = returnElectrons(sampledData,cameraParams);

myData = photonData;
psf = psfs{1};
centerCoor = params.centerCoor;

estimated = findSpotsStage1V2(myData,psf,cameraVar,'kMatrix',1,'nonNegativity',true);
estimatedGamma = gammaCorrection(myData,psf,cameraVar,'kMatrix',1,'nonNegativity',true);

plot3Dstack(smoothBKGNDKern);
plot3Dstack(theBigLambda);
plot3Dstack(estimatedGamma.A1);
plot3Dstack(estimatedGamma.LLRatio);
plot3Dstack(estimatedGamma.negLoggammaSig);
% % prep data output
% trueData = xyMaxProjND( bigLambdas{1});
% 
% candidates = selectCandidates(estimated,'strategy','otsu');
% plot3Dstack(candidates.L);
% candidatesSep = selectCandidates(estimatedSep);
% 
% MLEs = findSpotsStage2V2(photonData,cameraVar,estimated,candidates,Kmatrix,psfObjs,'doPlotEveryN',10);
% 
% 

%% generated by hand tuning the 3D to flat representation
% H = genVoxelPSF(psf,centerCoor);



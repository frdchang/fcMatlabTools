%% generate figure 2 - sketch of pipeline
% parameters for 2 spots setup
Kmatrix = [1 0.2; 0 1];
binning = 3;
params.sizeData         = [51 21 11];
params.centerCoor       = round(params.sizeData/2);

params.psfFunc          = @genPSF;
params.psfFuncArgs      = {{'lambda',514e-9,'f',binning,'mode',0},{'lambda',610e-9,'f',binning,'mode',0}};
params.threshPSFArgs    = {[7,7,7]};
params.NoiseFunc        = @genSCMOSNoiseVar;
params.NoiseFuncArgs    = {params.sizeData,'scanType','slow'};

params.As               = 30;
params.Bs               = 0;
params.dist2Spots       = 29;

cameraVar          = params.NoiseFunc(params.NoiseFuncArgs{:});

centerCoor = params.centerCoor ;
psfs        = cellfunNonUniformOutput(@(x) params.psfFunc(x{:}),params.psfFuncArgs);
psfs        = cellfunNonUniformOutput(@(x) centerGenPSF(x),psfs);
psfObjs     = cellfunNonUniformOutput(@(x) myPattern_Numeric(x,'downSample',[binning,binning,binning]),psfs);
psfs        = cellfunNonUniformOutput(@(x) x.returnShape,psfObjs);
psfs        = cellfunNonUniformOutput(@(x) threshPSF(x,params.threshPSFArgs{:}),psfs);

domains     = genMeshFromData(zeros(params.sizeData));
secondCoor = centerCoor+[params.dist2Spots 0 0];
spotCoors2spots = {{[params.As centerCoor],params.Bs},{[params.As secondCoor],params.Bs}};

% 1 spot setup
bkgndVal = 7;
centerCoor = [8 11 6];
bkgnd = zeros(params.sizeData);
bkgnd(1:round(params.sizeData(1)/2),:,:) = bkgndVal;
smoothBKGNDKern = ndGauss([60,60,60],[70,70,70]);
smoothBKGNDKern = smoothBKGNDKern / sum(smoothBKGNDKern(:));
bkgnd = padarray(bkgnd,[100,100,100],'replicate');
bkgnd = convFFTND(bkgnd,smoothBKGNDKern);
bkgnd = unpadarray(bkgnd,params.sizeData);

secondCoor = centerCoor+[params.dist2Spots 0 0];
spotCoors = {{[20 centerCoor],[20 secondCoor],params.Bs}};
bigTheta    = genBigTheta(1,psfObjs,spotCoors);
bigLambdas  = bigLambda(domains,bigTheta,'objKerns',psfObjs);

theBigLambda = bigLambdas{1} + bkgnd;
[sampledData,~,cameraParams] = genMicroscopeNoise(theBigLambda,'readNoiseData',cameraVar);
[~,photonData] = returnElectrons(sampledData,cameraParams);

myData = photonData;
psf = psfs{1};
centerCoor = params.centerCoor;

estimated = findSpotsStage1V2(myData,psf,cameraVar,'kMatrix',1,'nonNegativity',true);
estimatedGamma = gammaCorrection(myData,psf,cameraVar,'kMatrix',1,'nonNegativity',false);

plot3Dstack(theBigLambda);
plot3Dstack(photonData);
plot3Dstack(estimatedGamma.A1);
plot3Dstack(estimatedGamma.LLRatio);
plot3Dstack(estimatedGamma.negLoggammaSig);
plot3Dstack(catNorm(estimated.LLRatio,estimatedGamma.LLRatio,estimatedGamma.negLoggammaSig));
% prep data output
signalXY = xyMaxExtremumProjND(bigLambdas{1});
bkgndXY  = xyMaxExtremumProjND(bkgnd);
photonsXY = xyMaxExtremumProjND(photonData);
photonsXY(photonsXY<0) = 0;
A1XY = xyMaxExtremumProjND(estimated.A1);
B1XY = xyMaxExtremumProjND(estimated.B1);
B0XY = xyMaxExtremumProjND(estimated.B0);
LLRXY = xyMaxExtremumProjND(estimated.LLRatio);
uberImage = cat(2,signalXY,bkgndXY,photonsXY,A1XY,B1XY,B0XY);
exportStack('~/Desktop/sigBkgndPhotonsA1B1B0',norm2UINT255(uberImage));
exportStack('~/Desktop/LLRatio',norm2UINT255(LLRXY));

gamXY = estimatedGamma.negLoggammaSig;
gamXY(gamXY==inf) = 100;
gamXY = xyMaxExtremumProjND(gamXY);
exportStack('~/Desktop/gamma',norm2UINT255(gamXY));

% select candidates
test = estimatedGamma;
test.LLRatio(estimatedGamma.negLoggammaSig == inf) = 1000;
candidates = selectCandidates(test,'LLRatioThresh',999);
candLabel = xyMaxProjND(candidates.L);
candLabel = label2rgb(candLabel,'lines','k');
imwrite(candLabel,'~/Desktop/candidates.tif');
% candidatesSep = selectCandidates(estimatedSep);
% 
estimated = findSpotsStage1V2({myData},psfs(1),cameraVar,'kMatrix',1,'nonNegativity',true);

MLEs = findSpotsStage2V2({myData},cameraVar,estimated,candidates,1,psfObjs(1),'doPlotEveryN',2,'numSpots',1);

% 
% 

%% generated by hand tuning the 3D to flat representation
% H = genVoxelPSF(psf,centerCoor);



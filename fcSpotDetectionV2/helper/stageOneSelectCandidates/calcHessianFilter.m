function [ hessians ] = calcHessianFilter(data,est,kern,kernDs,kernD2s,cameraVariance)
%CALCHESSIAN Summary of this function goes here
%   Detailed explanation goes here

convF    = @convFFTND;
kern        = flipAllDimensions(kern);
kernDs      = cellfunNonUniformOutput(@(x) flipAllDimensions(x),kernDs);
kernD2s      = cellfunNonUniformOutput(@(x) flipAllDimensions(x),kernD2s);
invVar2      = 1./cameraVariance;
invVar4      = 1./cameraVariance.^2;
dataN2       = data.*invVar2;
dataN4       = data.*invVar4;

hessians = cell(3,3);
for ii = 1:3
    for jj = 1:3
        hessians{ii,jj} = ...
            - est.A1.*(est.B1.^2).*convF(invVar4,kernD2s{ii,jj}) ...
            - 2*(est.A1.^2).*est.B1.*convF(invVar4,kernD2s{ii,jj}.*kern) ...
            - (est.A1.^3).*convF(invVar4,kernD2s{ii,jj}.*(kern.^2)) ...
            + est.A1.*est.B1.*convF(dataN4,kernD2s{ii,jj}) ...
            - (est.A1.^2).*convF(dataN4,kernDs{ii}.*kernDs{jj}) ...
            + (est.A1.^2).*convF(dataN4,kernD2s{ii,jj}.*kern) ...
            - est.A1.*est.B1.*convF(invVar2,kernD2s{ii,jj}) ...
            - (est.A1.^2).*convF(invVar2,kernDs{ii}.*kernDs{jj}) ...
            - (est.A1.^2).*convF(invVar2,kernD2s{ii,jj}.*kern) ...
            + est.A1.*convF(dataN2,kernD2s{ii,jj});
    end
end

